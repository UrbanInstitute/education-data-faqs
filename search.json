[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Education Data Portal – API FAQs",
    "section": "",
    "text": "About these FAQs\nThe Urban Institute’s Education Data Portal allows users to view data endpoints and select summary endpoints directly in their web browser. Users can access this application programming interface (API) by directly hitting a URL endpoint or by using Stata or R.\nThis FAQ guide provides examples for interacting with the API in more complex ways than described in the API documentation. We offer suggested syntax in Python, R, Stata, and JavaScript for each of these examples. Please reference the official documentation for the full list of endpoints and variables available in the portal. The R package and Stata package also include additional documentation and examples for interacting with the API.\n\n\n\nWhy am I getting only 10,000 results when I make an API call?\nThe API limits the number of records returned per page to 10,000. This ceiling prevents large data requests from slowing down the API for other users. To pull a full response that spans multiple pages, you will need to iterate over the pages and append the results together.\nThe R and Stata packages handle this process for you.\n\nPythonRStataJavaScript\n\n\nimport requests \nimport pandas as pd \n\n# Specify endpoint URL \nurl = \"https://educationdata.urban.org/api/v1/schools/ccd/directory/2020/\"\n\n# Loop over pages \nresponse = requests.get(url).json()\ndata = response[\"results\"]\nwhile response[\"next\"]:\n    response = requests.get(response[\"next\"]).json()\n    data.extend(response[\"results\"])\n\n# Convert response to pandas dataframe \ndf = pd.DataFrame(data)\n\n\n# The educationdata R package will take care of appending all pages for you\nlibrary(educationdata)\n\ndata <- get_education_data(\n    level = \"schools\",\n    source = \"ccd\",\n    topic = \"directory\",\n    filters = list(year = 2020)\n)\n\n\n# The educationdata Stata package will take care of appending all pages for you\neducationdata using \"school ccd directory\", sub(year=2020)\n\n\n// Specify endpoint URL\nlet url = \"https://educationdata.urban.org/api/v1/schools/ccd/directory/2020/\"\nlet data = []\n\nconst getData = async (url) => {\n    // Get first page of data\n    const response = await fetch(url);\n    const json = await response.json();\n\n    // Add new data to our list\n    data = data.concat(json.results);\n\n    // If there is another page, recursively loop over it\n    if (json.next) {\n        await getData(json.next);\n    }\n}\n\n// Run our function\ngetData(url)\n\n\n\n\n\n\nHow can I pull large data requests more quickly?\nFor large data requests, it may be faster to download the full dataset as a CSV file, rather than using the API endpoints. You can find the link to the relevant CSV file in the API documentation under the “Downloads” tab. You can also click on the link to download the CSV file directly to your computer.\n\nA single CSV file may include data spanning multiple API endpoints (e.g., CCD enrollment data disaggregated by grade, sex, and race for a given year are all included in the same CSV file). You may need to filter (e.g., remove non-total rows or subset specific years) to ensure that the records returned from a particular CSV file match the aggregation in a particular API endpoint.\nThe relevant functions in the R and Stata packages include a csv option to access data using this approach.\n\nPythonRStataJavaScript\n\n\nimport pandas as pd \n\n# Read all CCD directory data since 1986 \ndf = pd.read_csv(\"https://educationdata.urban.org/csv/ccd/schools_ccd_directory.csv\")\n\n\nlibrary(educationdata)\n\n# Specify the csv option in the R package \ndata <- get_education_data(\n    level = \"schools\",\n    source = \"ccd\",\n    topic = \"directory\",\n    csv = TRUE\n)\n\n\n# Specify the csv option in the Stata package \neducationdata using \"schools ccd directory\", csv\n\n\n// We'll stream data from a remote CSV.\n//\n// BEWARE: Some of these files are quite large, and you may \n// run into allocation issues if you save the entire contents \n// of a file larger than 512MB into memory.\n// \n// In that case, handle each line of data\n// individually and do not write all the data \n// to an object.\n\n// Import packages we'll need from node. (You may have other preferences)\nimport csvParser from \"csv-parser\"\nimport axios from \"axios\"\n\n// CSV data is stored at this URL\nconst myUrl = \"https://educationdata.urban.org/csv/ccd/schools_ccd_directory.csv\";\n\n// Where we'll stream our resulting data to for later use\nconst results = []\n\n// Create a data stream from our url with the axios package\nconst {data} = await axios({\n    method: \"GET\",\n    url: myUrl,\n    responseType: \"stream\"\n})\n\n// Pipe that stream through a lightweight CSV parser package\n// to handle step by step. We'll handle the \"data\" and \"end\" events.\ndata.pipe(csvParser())\n    // For each line of data from the CSV\n    .on(\"data\", (data => {\n            results.push(data)\n        }\n    ))\n    // For when we're done parsing the file\n    .on(\"end\", (err) => {\n        if (err) {\n            console.log(\"An error has occurred\")\n        } else {\n            // Show the first line, \n            // or assign a callback function to handle the data.\n            console.log(\"final results: \",results[0]); \n        }\n    })\n\n\n\n\n\n\nHow can I pull aggregated statistics more quickly?\nThe API includes summary endpoints that provide rapid, customized access to aggregated statistics, such as averages, medians, or sums. For many analyses, these summary endpoints will be orders of magnitude faster than pulling the raw records and performing the summary aggregations. The general form of a summary API call is as follows:\nhttps://educationdata.urban.org/api/v1/{section}/{source}/{topic}/summaries?var={var}&stat={stat}&by={by}\nAdditional filters can be added to summary API calls, and data tables have been prejoined against their associated directory file, providing additional options for the by and filter arguments.\nFor detailed information and usage examples of the summary endpoints, see this blog post and this repository. You can also use the “Summary request” tab in the API documentation to build simple summary requests using a graphical interface. Although not displayed in this interface, you can also include multiple grouped variables and multiple filters, as shown below.\n\nThe summary endpoint functionality has been integrated into the R and Stata packages providing simplified syntax through the get_education_data_summary() function and summaries option for R and Stata, respectively.\nAs an example, to sum student enrollment by state and race for schools in Illinois (state FIPS = 17) and Wisconsin (state FIPS = 55) for 2018-20, you could use the following syntax:\n\nPythonRStataJavaScript\n\n\nimport requests \n\n# Specify base URL \nurl = \"https://educationdata.urban.org/api/v1/schools/ccd/enrollment/summaries\"\n\n# Specify parameters as a dictionary \npayload = {\n    \"stat\": \"sum\",\n    \"by\": \"fips,race\", \n    \"var\": \"enrollment\", \n    \"fips\": \"17,55\", \n    \"year\": \"2018,2019,2020\"\n}\n\n# Pass parameters into API request \nresponse = requests.get(url, params=payload).json()\ndata = response[\"results\"]\n\n\nlibrary(educationdata)\n\ndf <- get_education_data_summary(\n    level = \"schools\",\n    source = \"ccd\",\n    topic = \"enrollment\",\n    stat = \"sum\",\n    var = \"enrollment\",\n    by = list(\"fips\", \"race\"),\n    filters = list(fips = list(17,55), \n                   year = 2018:2020)\n)\n\n\neducationdata using \"school ccd enrollment\", summaries(sum enrollment by fips race) sub(fips=17,55 year=2018,2019,2020)\n\n\n// Data is stored at this URL object\nconst myUrl = new URL(\"https://educationdata.urban.org/api/v1/schools/ccd/enrollment/summaries\");\n\n// Use searchParams to append our filters to the URL\nmyUrl.searchParams.append(\"stat\",\"sum\")\nmyUrl.searchParams.append(\"by\",\"fips,race\")\nmyUrl.searchParams.append(\"var\",\"enrollment\")\nmyUrl.searchParams.append(\"fips\",\"17,55\")\nmyUrl.searchParams.append(\"year\",\"2018,2019,2020\")\n\n// Pass request to API and pull our data down\nconst response = await fetch(myUrl.href);\nconst data = await response.json();\n\n\n\n\n\n\nHow can I specify multiple values within a filter in an API call?\nA comma (,) can be used to pass multiple values into a filter within an endpoint URL. For example, to pull 2020 CCD directory data for schools in Illinois (state FIPS = 17) and Wisconsin (state FIPS = 55), you would include the query string ?fips=17,55:\nhttps://educationdata.urban.org/api/v1/schools/ccd/directory/2020?fips=17,55\nWhen using the R and Stata packages, you can pass a comma-separated list of values to include into the filters argument or sub option.\n\nPythonRStataJavaScript\n\n\nimport requests \n\n# Specify base URL \nurl = \"https://educationdata.urban.org/api/v1/schools/ccd/directory/2020\"\n\n# Specify filters as a dictionary with commas separating multiple values for a key \npayload = {\"fips\": \"17,55\"}\n\n# Pass filters into API request \nresponse = requests.get(url, params=payload).json()\ndata = response[\"results\"]\n\n\nlibrary(educationdata)\n\ndata <- get_education_data(\n    level = \"schools\",\n    source = \"ccd\",\n    topic = \"directory\", \n    filters = list(year = 2020, \n                   fips = list(17,55))\n)\n\n\neducationdata using \"school ccd directory\", sub(year=2020 fips=17,55)\n\n\n// Data is stored at this URL object\nconst myUrl = new URL(\"https://educationdata.urban.org/api/v1/schools/ccd/directory/2020\");\n\n// With searchParams, append a comma-delimited filter\nmyUrl.searchParams.append(\"fips\",\"17,55\")\n\n// Pass request to API and pull data down\nconst response = await fetch(myUrl.href);\nconst data = await response.json();\n\n\n\n\n\n\nHow can I specify multiple filters in an API call?\nAn ampersand (&) can be used to pass multiple filters as query parameters in an endpoint URL. For example, to pull 2020 CCD directory data for high schools (school level = 3) in Illinois (state FIPS = 17), you would include the query string ?school_level=3&fips=17:\nhttps://educationdata.urban.org/api/v1/schools/ccd/directory/2020?school_level=3&fips=17\nThe R and Stata packages provide simplified syntax for passing multiple filters into an API call. When using the R package, the filters argument accepts a list of filters. Similarly, you can pass multiple filters in the sub option in the Stata package.\n\nPythonRStataJavaScript\n\n\nimport requests \n\n# Specify base URL \nurl = \"https://educationdata.urban.org/api/v1/schools/ccd/directory/2020\"\n\n# Specify filters as a dictionary \npayload = {\n    \"school_level\": \"3\", \n    \"fips\": \"17\", \n}\n\n# Pass filters into API request \nresponse = requests.get(url, params=payload).json()\ndata = response[\"results\"]\n\n\nlibrary(educationdata)\n\ndata <- get_education_data(\n    level = \"schools\",\n    source = \"ccd\",\n    topic = \"directory\", \n    filters = list(\n        year = 2020, \n        school_level = 3,\n        fips = 17\n    )\n)\n\n\neducationdata using \"school ccd directory\", sub(year=2020 school_level=3 fips=17)\n\n\n// Data is stored at this URL object\nconst myUrl = new URL(\"https://educationdata.urban.org/api/v1/schools/ccd/directory/2020\");\n\n// With searchParams, append multiple filters\nmyUrl.searchParams.append(\"school_level\",\"3\")\nmyUrl.searchParams.append(\"fips\",\"17\")\n\n// Pass request to API and pull data down\nconst response = await fetch(myUrl.href);\nconst data = await response.json();\n\n\n\n\n\n\nHow can I pull the most recent data for an endpoint without manually specifying the year?\nThe following metadata endpoint can be used to pull the most recent year of data available on the portal for an endpoint: https://educationdata.urban.org/api/v1/api-endpoints. From that metadata endpoint, you can identify the latest available year by slicing the last four characters of the years_available field for the relevant endpoint. Then, you would pass those four digits into the relevant data endpoint.\nThis functionality is not directly built into the R package, but example syntax using the httr package is provided below. This functionality is not supported through the Stata package.\n\nPythonRStataJavaScript\n\n\nimport requests \n\ndef get_latest_year(endpoint_id):\n    \"\"\"\n    Get most recent year of available data for a given endpoint. \n    \n    Use the following metadata endpoint to find a particular endpoint_id: \n    https://educationdata.urban.org/api/v1/api-endpoints/\n\n    Args:\n        endpoint_id (int): Unique endpoint ID (e.g. 24)\n\n    Returns:\n        str: Latest year (e.g. 2019) \n    \"\"\"\n    metadata_url = \"https://educationdata.urban.org/api/v1/api-endpoints/\"\n    payload = {\"endpoint_id\": endpoint_id}\n    response = requests.get(metadata_url, params=payload).json()\n    data = response[\"results\"]\n    latest_year = data[0][\"years_available\"][-4:] # Get last 4 digits  \n    return latest_year \n\n\n# Get the latest year for the school-level CCD directory endpoint \nlatest_year = get_latest_year(endpoint_id=24)\n\n# Generate the endpoint for the latest school-level CCD directory endpoint \nurl = f\"https://educationdata.urban.org/api/v1/schools/ccd/directory/{latest_year}\"\n\nresponse = requests.get(url).json()\ndata = response[\"results\"]\n\n\nlibrary(educationdata)\n\n#' Get most recent year of available data for a given endpoint. \n#' \n#' Use the following metadata endpoint to find a particular endpoint_id: \n#  https://educationdata.urban.org/api/v1/api-endpoints/\n#'\n#' @param endpoint_id Unique endpoint ID (e.g. 24)\n#'\n#' @return Latest year (e.g. 2019)\nget_latest_year <- function(endpoint_id) {\n    metadata_url <- \"https://educationdata.urban.org/api/v1/api-endpoints/\"\n    response <- httr::GET(metadata_url, query = list(endpoint_id = endpoint_id))\n    years_available <- httr::content(response)$results[[1]]$years_available\n    latest_year <- substr(years_available, \n                          start = nchar(years_available)-3, \n                          stop = nchar(years_available))\n    return (latest_year)\n}\n\n# Get the latest year for the school-level CCD directory endpoint \nlatest_year <- get_latest_year(endpoint_id=24)\n\n# Pass the latest year into the filter \ndata <- get_education_data(\n    level = \"schools\",\n    source = \"ccd\",\n    topic = \"directory\",\n    filters = list(year = latest_year)\n)\n\n\n# This functionality is not supported through the Stata package \n\n\n// Create a function to get latest year from endpoint metadata\nconst getLatestYear = async (endpointId = 24) => {\n    // Get metadata for the endpoint we'd like to use\n    const metadataUrl = new URL(\"https://educationdata.urban.org/api/v1/api-endpoints/\")\n    metadataUrl.searchParams.append(\"endpoint_id\",endpointId)\n    const response = await fetch(metadataUrl)\n    const data = await response.json()\n\n    // From metadata, pull the latest year we have data for\n    const yearsAvailable = data.results[0][\"years_available\"]\n    const thisLatestYear = yearsAvailable.substring(yearsAvailable.length - 4)\n    return thisLatestYear \n};\n\n// Visit the API-endpoint site to decide which endpoint we want to pursue\nconst myEndpointId = 24\n\n// Call our function\nconst latestYear = await getLatestYear(myEndpointId)\n\n// Build a URL accessing only the year of data we specify\nconst myUrl = \"https://educationdata.urban.org/api/v1/schools/ccd/directory/\"+latestYear\n\n// Pass request to API to pull latest data down\nconst response = await fetch(myUrl);\nconst data = await response.json();\n\n\n\n\n\n\nWhat metadata endpoints are available?\nSeveral metadata endpoints that describe the data in the portal may be useful to developers:\nhttps://educationdata.urban.org/api/v1/api-endpoints\nLists general information about each endpoint (e.g., their IDs, URLs, and years available).\nhttps://educationdata.urban.org/api/v1/api-downloads\nLists information about downloadable data files and codebooks for each endpoint. All URLs to direct downloads follow this format: https://educationdata.urban.org/csv/{file_dir}/{file_name}.\nhttps://educationdata.urban.org/api/v1/api-variables\nLists information about each variable in the portal (e.g., their data types and formats, labels, and special values). Each record is a unique variable.\nhttps://educationdata.urban.org/api/v1/api-endpoint-varlist\nLists information about each variable in the portal, broken out by endpoint. Each record is a unique endpoint_id and variable combination.\n\nBy using this API, you agree to abide by the Data Policy and Terms of Use of the Education Data Portal.\nFor general questions or feedback, email us at educationdata@urban.org. For questions or feedback on this FAQ guide, please open an issue on GitHub here."
  }
]